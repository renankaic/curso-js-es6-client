{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","ConnectionFactory","getConnection","then","NegociacaoDao","connection","dao","listaTodos","catch","console","log","erro","Error","negociacao","adiciona","error","apagaTodos","listaAtual","obterNegociacoes","negociacoes","reduce","arrayAchatado","array","concat","filter","some","isEquals","negociacaoExistente","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","resolve","reject","get","map","Negociacao","Date","objeto","data","quantidade","valor"],"mappings":";;;;;;IAAMA,iB;AAEF,iCAAc;AAAA;;AAEV,aAAKC,KAAL,GAAa,IAAIC,WAAJ,EAAb;AAEH;;;;gCAEO;;AAEJ,mBAAOC,kBACFC,aADE,GAEFC,IAFE,CAEG;AAAA,uBAAc,IAAIC,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,aAFH,EAEgD;AAFhD,aAGFF,IAHE,CAGG;AAAA,uBAAOG,IAAIC,UAAJ,EAAP;AAAA,aAHH,EAG4B;AAH5B,aAIFC,KAJE,CAII,gBAAQ;AACXC,wBAAQC,GAAR,CAAYC,IAAZ;AACA,sBAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACH,aAPE,CAAP;AASH;;;iCAEQC,U,EAAY;;AAEjB,mBAAOZ,kBACFC,aADE,GAEFC,IAFE,CAEG;AAAA,uBAAc,IAAIC,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,aAFH,EAGFF,IAHE,CAGG;AAAA,uBAAOG,IAAIQ,QAAJ,CAAaD,UAAb,CAAP;AAAA,aAHH,EAIFV,IAJE,CAIG;AAAA,uBAAM,oCAAN;AAAA,aAJH,EAKFK,KALE,CAKI,gBAAQ;AACXC,wBAAQC,GAAR,CAAYK,KAAZ;AACA,sBAAM,IAAIH,KAAJ,CAAU,0CAAV,CAAN;AACH,aARE,CAAP;AAUH;;;qCAEY;;AAET,mBAAOX,kBACFC,aADE,GAEFC,IAFE,CAEG;AAAA,uBAAc,IAAIC,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,aAFH,EAGFF,IAHE,CAGG;AAAA,uBAAOG,IAAIU,UAAJ,EAAP;AAAA,aAHH,EAIFb,IAJE,CAIG;AAAA,uBAAM,kCAAN;AAAA,aAJH,EAKFK,KALE,CAKI,gBAAQ;AACXC,wBAAQC,GAAR,CAAYC,IAAZ;AACA,sBAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACH,aARE,CAAP;AAUH;;;gCAEOK,U,EAAY;;AAEhB,mBAAQ,KACKC,gBADL,GAEKf,IAFL,CAEU;AAAA,uBACFgB,YACKC,MADL,CACY,UAACC,aAAD,EAAgBC,KAAhB;AAAA,2BAA0BD,cAAcE,MAAd,CAAqBD,KAArB,CAA1B;AAAA,iBADZ,EACmE,EADnE,EAEKE,MAFL,CAEY;AAAA,2BACJ,CAACP,WAAWQ,IAAX,CAAgB;AAAA,+BAAuBZ,WAAWa,QAAX,CAAoBC,mBAApB,CAAvB;AAAA,qBAAhB,CADG;AAAA,iBAFZ,CADE;AAAA,aAFV,EASKnB,KATL,CASW,iBAAS;AACZC,wBAAQC,GAAR,CAAYK,KAAZ;AACA,sBAAM,IAAIH,KAAJ,CAAU,sDAAV,CAAN;AACH,aAZL,CAAR;AAcH;;;2CAEkB;;AAEf,mBAAOgB,QAAQC,GAAR,CAAY,CACf,KAAKC,wBAAL,EADe,EAEf,KAAKC,gCAAL,EAFe,EAGf,KAAKC,iCAAL,EAHe,CAAZ,CAAP;AAMH;;;mDAE0B;AAAA;;AAEvB,mBAAO,IAAIJ,OAAJ,CAAY,UAACK,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,sBAAKnC,KAAL,CACKoC,GADL,CACS,oBADT,EAEKhC,IAFL,CAEU,uBAAe;AACjB8B,4BAASd,YAAYiB,GAAZ,CAAgB;AAAA,+BAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,qBAAhB,CAAT;AACH,iBAJL,EAKKlC,KALL,CAKW,iBAAS;AACZC,4BAAQC,GAAR,CAAYK,KAAZ;AACAmB,2BAAO,iDAAP;AACH,iBARL;AAUH,aAZM,CAAP;AAcH;;;4DAEmC;AAAA;;AAEhC,mBAAO,IAAIN,OAAJ,CAAY,UAACK,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,uBAAKnC,KAAL,CACKoC,GADL,CACS,uBADT,EAEKhC,IAFL,CAEU,uBAAe;AACjB8B,4BAAQd,YAAYiB,GAAZ,CAAgB;AAAA,+BAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,qBAAhB,CAAR;AACH,iBAJL,EAKKlC,KALL,CAKW,iBAAS;AACZC,4BAAQC,GAAR,CAAYK,KAAZ;AACAmB,2BAAO,iDAAP;AACH,iBARL;AAUH,aAZM,CAAP;AAcH;;;2DAEkC;AAAA;;AAE/B,mBAAO,IAAIN,OAAJ,CAAY,UAACK,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,uBAAKnC,KAAL,CACKoC,GADL,CACS,sBADT,EAEKhC,IAFL,CAEU,uBAAe;AACjB8B,4BAAQd,YAAYiB,GAAZ,CAAgB;AAAA,+BAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,qBAAhB,CAAR;AACH,iBAJL,EAKKlC,KALL,CAKW,iBAAS;AACZC,4BAAQC,GAAR,CAAYK,KAAZ;AACAmB,2BAAO,iDAAP;AACH,iBARL;AAUH,aAZM,CAAP;AAcH","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n    constructor() {\n\n        this._http = new HttpService();\n\n    }\n\n    lista() {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection)) //O \"return\" aqui é implícito\n            .then(dao => dao.listaTodos()) //O \"return\" aqui é implícito. Retornará uma lista do metodo listaTodos()\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível listar as Negociações\");\n            });\n\n    }\n\n    cadastra(negociacao) {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => \"Negociação adicionada com sucesso!\")\n            .catch(erro => { \n                console.log(error);\n                throw new Error(\"Não foi possível adicionar a negociação.\")\n            });\n\n    }\n\n    apagaTodos() {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => \"Negociações apagadas com sucesso\")\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível apagar as Negociações\");\n            })\n\n    }\n\n    importa(listaAtual) {\n\n        return  this\n                    .obterNegociacoes()\n                    .then(negociacoes =>\n                        negociacoes\n                            .reduce((arrayAchatado, array) => arrayAchatado.concat(array), [])\n                            .filter(negociacao =>\n                                !listaAtual.some(negociacaoExistente => negociacao.isEquals(negociacaoExistente)))\n                                    \n                    )\n                    .catch(error => {\n                        console.log(error);\n                        throw new Error(\"Não foi possível buscar as negociações para importar\");\n                    });\n\n    }\n\n    obterNegociacoes() {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]);\n\n    }\n\n    obterNegociacoesDaSemana() {\n\n        return new Promise((resolve, reject) => {\n\n            this._http\n                .get(\"negociacoes/semana\")\n                .then(negociacoes => {\n                    resolve( negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)) )\n                })\n                .catch(error => {\n                    console.log(error);\n                    reject(\"Não foi possível obter as negociações da Semana\");\n                });\n\n        });\n\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n        return new Promise((resolve, reject) => {\n\n            this._http\n                .get(\"negociacoes/retrasada\")\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n                })\n                .catch(error => {\n                    console.log(error);\n                    reject(\"Não foi possível obter as negociações da Semana\");\n                });\n\n        });   \n\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n\n        return new Promise((resolve, reject) => {\n\n            this._http\n                .get(\"negociacoes/anterior\")\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n                })\n                .catch(error => {\n                    console.log(error);\n                    reject(\"Não foi possível obter as negociações da Semana\");\n                });\n\n        });\n\n    }\n\n}"]}