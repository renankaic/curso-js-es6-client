{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","conn","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","connection","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;;AAEhC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,OAAO,IAAX;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;;AAEnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;AACAQ,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,qBAJD;;AAMAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAI,CAACf,IAAL,EAAW;AACPA,mCAAOY,EAAEC,MAAF,CAASC,MAAhB;AACAb,oCAAQD,KAAKC,KAAL,CAAWe,IAAX,CAAgBhB,IAAhB,CAAR;AACAA,iCAAKC,KAAL,GAAa,YAAW;AACpB,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,IAAR;AAEH,qBAXD;;AAaAM,gCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAEH,qBALD;AAOH,iBA7BM,CAAP;AA+BH;AAvCL;AAAA;AAAA,8CAyC4B;;AAEpB,oBAAGrB,IAAH,EAAS;AACLC;AACAD,2BAAO,IAAP;AACH;AAEJ;AAhDL;AAAA;AAAA,0CAkDyBsB,UAlDzB,EAkDqC;;AAE7BzB,uBAAO0B,OAAP,CAAe,iBAAS;;AAEpB,wBAAID,WAAWE,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7CJ,mCAAWK,iBAAX,CAA6BD,KAA7B;AACH;;AAEDJ,+BAAWM,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AAEH,iBARD;AAUH;AA9DL;;AAAA;AAAA;AAkEH,CA3EuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function() {\n\n    const stores = ['negociacoes'];\n    const version = 5;\n    const dbName = 'aluraframe';\n    \n    var conn = null;\n    var close = null;\n\n    return class ConnectionFactory {\n\n        constructor() {\n            throw new Error(\"Não é possível criar instâncias de ConnectionFactory\");\n        }\n\n        static getConnection() {\n\n            return new Promise((resolve, reject) => {\n\n                let openRequest = window.indexedDB.open(dbName, version);\n                openRequest.onupgradeneeded = e => {\n\n                    ConnectionFactory._createStores(e.target.result);\n\n                };\n\n                openRequest.onsuccess = e => {\n\n                    if (!conn) { \n                        conn = e.target.result;\n                        close = conn.close.bind(conn);\n                        conn.close = function() {\n                            throw new Error(\"Você não pode fechar diretamente a conexão.\");\n                        }\n                    };\n                    resolve(conn);\n\n                };\n\n                openRequest.onerror = e => {\n\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n\n                };\n\n            });\n\n        }\n\n        static closeConnection(){\n\n            if(conn) {\n                close();\n                conn = null;\n            }\n\n        }\n\n        static _createStores(connection) {\n\n            stores.forEach(store => {\n\n                if (connection.objectStoreNames.contains(store)) {\n                    connection.deleteObjectStore(store);\n                }\n\n                connection.createObjectStore(store, { autoIncrement: true });\n\n            });\n\n        }\n\n    }\n\n})();"]}